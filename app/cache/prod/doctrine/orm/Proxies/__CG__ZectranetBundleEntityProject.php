<?php

namespace Proxies\__CG__\ZectranetBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Project extends \ZectranetBundle\Entity\Project implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'id', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'name', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'description', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'typeID', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'type', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'ownerid', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'owner', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'parentid', 'parent', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'epicStories', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'versions', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'projectPermissions', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'users', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'officeID', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'office', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'tasks', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'sprints', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'postsProject', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'visible', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'archived', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'logs');
        }

        return array('__isInitialized__', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'id', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'name', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'description', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'typeID', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'type', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'ownerid', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'owner', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'parentid', 'parent', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'epicStories', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'versions', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'projectPermissions', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'users', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'officeID', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'office', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'tasks', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'sprints', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'postsProject', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'visible', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'archived', '' . "\0" . 'ZectranetBundle\\Entity\\Project' . "\0" . 'logs');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Project $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getInArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInArray', array());

        return parent::getInArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwnerid($ownerid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwnerid', array($ownerid));

        return parent::setOwnerid($ownerid);
    }

    /**
     * {@inheritDoc}
     */
    public function getOwnerid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwnerid', array());

        return parent::getOwnerid();
    }

    /**
     * {@inheritDoc}
     */
    public function setParentid($parentid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParentid', array($parentid));

        return parent::setParentid($parentid);
    }

    /**
     * {@inheritDoc}
     */
    public function getParentid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentid', array());

        return parent::getParentid();
    }

    /**
     * {@inheritDoc}
     */
    public function setOfficeID($officeID)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOfficeID', array($officeID));

        return parent::setOfficeID($officeID);
    }

    /**
     * {@inheritDoc}
     */
    public function getOfficeID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOfficeID', array());

        return parent::getOfficeID();
    }

    /**
     * {@inheritDoc}
     */
    public function setVisible($visible)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVisible', array($visible));

        return parent::setVisible($visible);
    }

    /**
     * {@inheritDoc}
     */
    public function getVisible()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVisible', array());

        return parent::getVisible();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner(\ZectranetBundle\Entity\User $owner = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', array($owner));

        return parent::setOwner($owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', array());

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\ZectranetBundle\Entity\Project $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', array($parent));

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', array());

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function removeEpicStory(\ZectranetBundle\Entity\Project $epicStories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEpicStory', array($epicStories));

        return parent::removeEpicStory($epicStories);
    }

    /**
     * {@inheritDoc}
     */
    public function getEpicStories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEpicStories', array());

        return parent::getEpicStories();
    }

    /**
     * {@inheritDoc}
     */
    public function addVersion(\ZectranetBundle\Entity\Version $versions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addVersion', array($versions));

        return parent::addVersion($versions);
    }

    /**
     * {@inheritDoc}
     */
    public function removeVersion(\ZectranetBundle\Entity\Version $versions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeVersion', array($versions));

        return parent::removeVersion($versions);
    }

    /**
     * {@inheritDoc}
     */
    public function getVersions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersions', array());

        return parent::getVersions();
    }

    /**
     * {@inheritDoc}
     */
    public function addUser(\ZectranetBundle\Entity\User $users)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUser', array($users));

        return parent::addUser($users);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUser(\ZectranetBundle\Entity\User $users)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUser', array($users));

        return parent::removeUser($users);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', array());

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function setOffice(\ZectranetBundle\Entity\Office $office = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOffice', array($office));

        return parent::setOffice($office);
    }

    /**
     * {@inheritDoc}
     */
    public function getOffice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOffice', array());

        return parent::getOffice();
    }

    /**
     * {@inheritDoc}
     */
    public function addTask(\ZectranetBundle\Entity\Task $tasks)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTask', array($tasks));

        return parent::addTask($tasks);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTask(\ZectranetBundle\Entity\Task $tasks)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTask', array($tasks));

        return parent::removeTask($tasks);
    }

    /**
     * {@inheritDoc}
     */
    public function getTasks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTasks', array());

        return parent::getTasks();
    }

    /**
     * {@inheritDoc}
     */
    public function addPostsProject(\ZectranetBundle\Entity\ProjectPost $postsProject)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPostsProject', array($postsProject));

        return parent::addPostsProject($postsProject);
    }

    /**
     * {@inheritDoc}
     */
    public function removePostsProject(\ZectranetBundle\Entity\ProjectPost $postsProject)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePostsProject', array($postsProject));

        return parent::removePostsProject($postsProject);
    }

    /**
     * {@inheritDoc}
     */
    public function getPostsProject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPostsProject', array());

        return parent::getPostsProject();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeID($typeID)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeID', array($typeID));

        return parent::setTypeID($typeID);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeID', array());

        return parent::getTypeID();
    }

    /**
     * {@inheritDoc}
     */
    public function setType(\ZectranetBundle\Entity\ProjectType $type = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', array($type));

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', array());

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setArchived($archived)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArchived', array($archived));

        return parent::setArchived($archived);
    }

    /**
     * {@inheritDoc}
     */
    public function getArchived()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArchived', array());

        return parent::getArchived();
    }

    /**
     * {@inheritDoc}
     */
    public function addLog(\ZectranetBundle\Entity\ProjectLog $logs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLog', array($logs));

        return parent::addLog($logs);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLog(\ZectranetBundle\Entity\ProjectLog $logs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLog', array($logs));

        return parent::removeLog($logs);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogs', array());

        return parent::getLogs();
    }

    /**
     * {@inheritDoc}
     */
    public function addSprint(\ZectranetBundle\Entity\Sprint $sprints)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSprint', array($sprints));

        return parent::addSprint($sprints);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSprint(\ZectranetBundle\Entity\Sprint $sprints)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSprint', array($sprints));

        return parent::removeSprint($sprints);
    }

    /**
     * {@inheritDoc}
     */
    public function getSprints()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSprints', array());

        return parent::getSprints();
    }

    /**
     * {@inheritDoc}
     */
    public function addProjectPermission(\ZectranetBundle\Entity\ProjectPermissions $projectPermissions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProjectPermission', array($projectPermissions));

        return parent::addProjectPermission($projectPermissions);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProjectPermission(\ZectranetBundle\Entity\ProjectPermissions $projectPermissions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProjectPermission', array($projectPermissions));

        return parent::removeProjectPermission($projectPermissions);
    }

    /**
     * {@inheritDoc}
     */
    public function getProjectPermissions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProjectPermissions', array());

        return parent::getProjectPermissions();
    }

}
