<?php

namespace Proxies\__CG__\ZectranetBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class QnAThread extends \ZectranetBundle\Entity\QnAThread implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'id', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'userID', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'user', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'posts', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'date', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'title', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'message', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'keywords', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'forumID', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'forum');
        }

        return array('__isInitialized__', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'id', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'userID', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'user', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'posts', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'date', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'title', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'message', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'keywords', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'forumID', '' . "\0" . 'ZectranetBundle\\Entity\\QnAThread' . "\0" . 'forum');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (QnAThread $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getInArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInArray', array());

        return parent::getInArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserID($userID)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserID', array($userID));

        return parent::setUserID($userID);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserID', array());

        return parent::getUserID();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', array($date));

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', array());

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setMessage($message)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMessage', array($message));

        return parent::setMessage($message);
    }

    /**
     * {@inheritDoc}
     */
    public function getMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMessage', array());

        return parent::getMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setKeywords($keywords)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKeywords', array($keywords));

        return parent::setKeywords($keywords);
    }

    /**
     * {@inheritDoc}
     */
    public function getKeywords()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKeywords', array());

        return parent::getKeywords();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\ZectranetBundle\Entity\User $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function addPost(\ZectranetBundle\Entity\QnAPost $posts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPost', array($posts));

        return parent::addPost($posts);
    }

    /**
     * {@inheritDoc}
     */
    public function removePost(\ZectranetBundle\Entity\QnAPost $posts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePost', array($posts));

        return parent::removePost($posts);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosts', array());

        return parent::getPosts();
    }

    /**
     * {@inheritDoc}
     */
    public function setForumID($forumID)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setForumID', array($forumID));

        return parent::setForumID($forumID);
    }

    /**
     * {@inheritDoc}
     */
    public function getForumID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getForumID', array());

        return parent::getForumID();
    }

    /**
     * {@inheritDoc}
     */
    public function setForum(\ZectranetBundle\Entity\QnAForum $forum = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setForum', array($forum));

        return parent::setForum($forum);
    }

    /**
     * {@inheritDoc}
     */
    public function getForum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getForum', array());

        return parent::getForum();
    }

}
